* emacs
我发现emacs这个玩意真是个神器，高度自定义化，像这类编辑器，本质无非就是创建了几个对象（buffer, window，frame，mode...）然后你就去理解这些概念，他们对这些对象有什么样的操作，定义了哪些快捷键各对应什么操作。这个东西就是个c实现的Elisp的解释器。你在里边的一切都用这个lisp语言来操作就行。

* frame
先说这个frame，你点开emacs给你一个窗口，这个玩意就叫一个frame，注意这个不叫windows（至于为什么这么叫，估计是历史原因，毕竟这玩意古老到比我
都大）。你可以在frame里边切分（类似分屏），每一个分屏叫一个windows。
工具栏，菜单栏略。

在frame最下边是个可以回显你操作的区域。叫Minibuffer。

关于frame的操作：C-x 5 XXX

* window
每个window都有个buffer区域和modeline，buffer就是编辑区域，modeline显示当前的状态信息：

- U: 编码
- ---:三个横线的区域表明buffer是否可写，buffer被更改，当前的目录
- 当前buffer对应的文件名（也可能不是个文件，说明还没保存）
- 当前显示位置在文件的什么位置
- 光标的位置
- mode:Major mode 和 Minor mode（比较复杂，后面详细讲）

关于windows的快捷键：
C-x 1 关闭其他所有window
C-x 2 上下拆分
C-x 3 左右拆分
C-x o 在window之间切换
C-x 0 关闭当前window

值得一提的是有个winner-mode模式可以简化windows的操作
(winner-mode 1)

还有个插件挺好用的

#+BEGIN_SRC elisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-scope 'frame) ;; was global
  (global-set-key (kbd "C-x O") 'other-frame)
  (global-set-key [remap other-window] 'ace-window))
#+END_SRC

* buffer
buffer说白了就是你编辑文件的缓冲区，在你编辑的东东还没有保存到磁盘上的
时候，暂时保存的一个抽象地方。

关于buffer我分成这么几个主题：光标（位置，移动），编辑（复制，粘贴，剪
切），

快捷键C-x b 切换buffer

可以使用(defalias 'list-buffers 'ibuffer)
list-buffer C-x C-b
ibuffer 可以对buffer进行编辑，d键删除，x执行，u撤销
* mode
mode简单来讲就是工作流模式，就是在你编辑不同的文件时候给你加载了一些功能，

org模式：用于编写文档，语法与markdown略有不同



** org
org is a life-style.
*** Heading
M-arrow 可以更改标题级别
*** Task management
TODO DONE CHECKBOX
shift-arrow 更改状态
复选框 C-c C-c可以填充
*** inline Links
C-c a m 按标签搜索
自动识别
*** inline Images

*** tables
**** create tables
table 自动创建下一行

**** sorting tables
M-arrow 上下左右都可以
C-c ^排序
**** Delete or add rows and columns
M-S-arrow
org-table-insert-row       M-S-down
org-table-kill-row         M-S-up
org-table-insert-column    M-S-right
org-table-delete-column    M-S-left

**** Import a table from a data file
Run M-x org-table-import to insert to here.
C-c - to get that line.
*** inline code

#+BEGIN_SRC python :tangle hello_word.py
  print("fdsf")
#+END_SRC
Tangle the file: elisp:org-babel-tangle
Now, run it:
#+BEGIN_SRC sh
python3 hello_word.py
#+END_SRC


C-c C-c
#+RESULTS: 

支持的语言可以查看org-mode-bleeding-edge/lisp/目录下文件名(directory-files)

*** 其他探索的资源
https://github.com/jkitchin/jmax

*** 做ppt

#+BEGIN_SRC
做ppt用到的 
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
#+REVEAL_ROOT: file:///Users/dh/reveal.js-5.1.0

#+TITLE: emacs-org
#+AUTHOR: p1ain0
#+DATE: [2025-01-23 Mon]

#+REVEAL_INIT_OPTIONS: slideNumber:true
#+REVEAL_THEME: sky
#+END_SRC
* others
** Search
C-s 向前搜索
C-r 向后搜索
#+BEGIN_SRC elisp
;; it looks like counsel is a requirement for swiper
(use-package counsel
  :ensure t
  )

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))


(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char))
#+END_SRC

** auto compelet

#+BEGIN_SRC elisp
(use-package auto-complete
:ensure t 
:init 
(progn
(ac-config-default)
(global-auto-complete-mode t)
))
#+END_SRC

** theme
M-x custom-theme选择主题
#+BEGIN_SRC elisp
(use-package color-theme
: ensure t)
(use-package zenburn-theme
:ensure t
:config (load-theme 'zenburn t))
#+END_SRC

** macro
C-x ( 开始
C-x ) 结束
M-x Insert-kdb-macro 命名

** 撤销

C-x u 或 C-_
undo
重做:
C-/ 或 M-y
redo
多级撤销:
连续按 C-x u 或 C-_
取消撤销:
M-- C-x u 或 M-- C-_
cancel-undo-boundary
显示撤销树:
C-x v t 或 M-x undo-tree-visualize RET

**
编辑快捷键



| Emacs 功能键  | 缩写 | 对应键盘按键(PC/Mac)  |
|--------------+-----+--------------------|
| Control      | C    | Ctrl / Control       |
| Meta         | M    | Alt / Option         |
| Shift        | S    | Shift / Shift        |
| Super        | s    | Win / Command        |
| Hyper        | H    | 无                   |



常用快捷键

| 操作描述                              | 快捷键                  | 命令名                          |
|--------------------------------------+------------------------+------------------------------  |
| 输入命令                              | M-x                    | execute-extended-command       |
| 退出程序                              | C-x C-c                | save-buffers-kill-terminal     |
| 放弃当前输入                           | C-g                    | keyboard-quit                  |
| 挂起                                 | C-z / C-x C-z          | fg恢复                         |
| **移动**                             |                        |                                |
| 光标向上一行（方向键上）                 | C-p                    | previous-line                  |
| 光标向下一行（方向键下）                 | C-n                    | next-line                      |
| 光标向左一个字符（方向键左）              | C-b                    | backward-char                  |
| 光标向右一个字符（方向键右）              | C-f                    | forward-char                   |
| 光标向左移动一个词                      | M-b                    | backward-word                  |
| 光标向右移动一个词                      | M-f                    | forward-word                   |
| 光标移至行首                           | C-a                    | move-beginning-of-line         |
| 光标移至行尾                           | C-e                    | move-end-of-line               |
| 光标移动到一行缩进的开头                 | M-m                    | back-to-indentation            |
| 光标移至句首                           | M-a                    | backward-sentence              |
| 光标移至句尾                           | M-e                    | forward-sentence               |
| 光标移至文件开头                        | M-<                    | beginning-of-buffer            |
| 光标移至文件结尾                        | M->                    | end-of-buffer                  |
| 光标移动至窗口的中间、最上、最下           | M-r                    | move-to-window-line-top-bottom |
| 向下一页                              | C-v                    | scroll-up-command              |
| 向上一页                              | M-v                    | scroll-down-command            |
| 移动页面使得光标在中央/最上方/最下方       | C-l                    | recenter-top-bottom            |
| **编辑**                             |                        |                                |
| 删除光标右侧字符                        | C-d                    | delete-char                    |
| 移除光标右侧词                         | M-d                    | kill-word                      |
| 移除光标左侧词                         | M-                     | backward-kill-word             |
| 移除右侧直到句子结尾                     | M-k                    | kill-sentence                  |
| 移除右侧直到行尾                        | C-k                    | kill-line                      |
| 设置标记以选择区域                      | C-SPC                  | set-mark-command               |
| 复制区域                              | M-w                    | kill-region-save               |
| 移除区域                              | C-w                    | kill-region                    |
| 插入已移除文本                         | C-y                    | yank                           |
| 插入历史移除文本                        | M-y                    | yank-pop                       |
| 撤回                                 | C-/ 或 C-_ 或 C-x u    | undo                           |
| 单行注释                              | C-x C-;                |                                |
| **标记跳转**                          |                        |                                |
| 跳转到上一标记                         | C-x C-SPC 或 C-u C-SPC | pop-global-mark                |
| 跳转到行号                             | M-g M-g                | goto-line                      |
| 重复                                 | C-u                    | universal-argument             |
| **搜索**                             |                        |                                |
| 向后搜索                              | C-s                    | isearch-forward                |
| 向前搜索                              | C-r                    | isearch-backward               |
| **其他一些操作**                       |                        |                                |
| 交换前后字符                           | C-t                    | transpose-chars                |
| 交换前后词                             | M-t                    | transpose-words                |
| 交换前后两行                           | C-x C-t                | transpose-lines                |
| 在下方新建一行                         | C-o                    | open-line                      |
| 删除连续空行为一个空行                   | C-x C-o                | delete-blank-lines             |
| 将后面的词变为小写                      | M-l                    | downcase-word                  |
| 将后面的词变为大写                      | M-u                    | upcase-word                    |
| 将后面的词变为首字母大写                 | M-c                    | capitalize-word                |
| 放大字号                              | C-x C-=                | text-scale-adjust              |
| 缩小字号                              | C-x C--                | text-scale-adjust              |
| 重置字号                              | C-x C-0                | text-scale-adjust              |
| **帮助**                             |                        |                                |
| 简要描述快捷键功能                      | C-h c                  | describe-key-briefly           |
| 描述快捷键功能                         | C-h k                  | describe-key                   |
| 描述函数功能                           | C-h f                  | describe-function              |
| 描述变量                              | C-h v                  | describe-variable              |
| 列出含某一关键词的命令                   | C-h a                  | apropos-command                |
| 列出含某一关键词的符号的文档              | C-h d                  | apropos-documentation          |
| 帮助的帮助                             | C-h ?                  | help-for-help                  |


** 帮助
M-x
help-with-tutorial-spec-language
help-with-tutorial (C-h t)




* elisp
M-x eval-last-sexp可以直接运行elisp语句（随时随地可用。写程序的时候，要是需要临时计算啥的很方便的）

view-lossage
